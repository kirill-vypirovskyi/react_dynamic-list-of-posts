{"version":3,"sources":["components/PostsList.tsx","utils/fetchClient.ts","api/comments.ts","components/Loader/Loader.tsx","components/NewCommentForm.tsx","components/PostDetails.tsx","components/UserSelector.tsx","App.tsx","api/users.ts","api/posts.ts","index.tsx"],"names":["PostsList","userPosts","onPostSelect","selectedPostID","className","map","post","id","title","isOpen","type","onClick","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","ok","Error","json","client","getComments","deleteComment","addComment","comment","Loader","NewCommentForm","isLoading","isError","onSubmit","commentField","onCommentChange","commentFieldError","setCommentError","useState","nameField","setNameField","emailField","setEmailField","nameFieldError","setNameFieldError","emailFieldError","setEmailFieldError","event","preventDefault","nameWithoutSpaces","trim","emailWithoutSpaces","commentWithoutSpaces","name","email","htmlFor","placeholder","classNames","value","onChange","target","PostDetails","comments","setComments","setLoading","setError","isFormOpen","setFormOpen","isAddingError","setAddingError","isAddingLoading","setAddingLoadig","setCommentField","setCommentFieldError","useEffect","fetchData","a","commentsFromServer","handlePostButtonClick","buttons","document","querySelectorAll","forEach","button","addEventListener","removeEventListener","removeComment","prev","temporaryComments","filter","addNewComment","useCallback","postId","newCommentData","hasComments","length","commentId","commentText","href","UserSelector","users","activeUserId","onUserChange","isSelectOpen","setSelectOpen","dropdownRef","useRef","handleClickOutside","current","contains","handleSelect","activeUser","find","user","role","ref","handleUserChange","App","setUsers","setActiveUserId","setUserPosts","isNoPosts","setNoPosts","selectedPost","setSelectedPost","usersFromServer","postsFromServer","handleSelectedUser","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.eeee6cfd.chunk.js","sourcesContent":["import { FC } from 'react';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  userPosts: Post[];\n  onPostSelect: (post: Post | null) => void;\n  selectedPostID: number | undefined;\n};\n\nexport const PostsList: FC<Props> = ({\n  userPosts,\n  onPostSelect,\n  selectedPostID,\n}) => {\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {userPosts.map(post => {\n            const {\n              id,\n              title,\n            } = post;\n\n            const isOpen = selectedPostID === id;\n\n            return (\n              <tr data-cy=\"Post\" key={id}>\n                <td data-cy=\"PostId\">{id}</td>\n\n                <td data-cy=\"PostTitle\">\n                  {title}\n                </td>\n\n                <td className=\"has-text-right is-vcentered\">\n                  {!isOpen && (\n                    <button\n                      type=\"button\"\n                      data-cy=\"PostButton\"\n                      className=\"button is-link is-light\"\n                      onClick={() => onPostSelect(post)}\n                    >\n                      Open\n                    </button>\n                  )}\n\n                  {isOpen && (\n                    <button\n                      type=\"button\"\n                      data-cy=\"PostButton\"\n                      className=\"button is-link\"\n                      onClick={() => onPostSelect(null)}\n                    >\n                      Close\n                    </button>\n                  )}\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nconst BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => {\n      if (!response.ok) {\n        throw new Error();\n      }\n\n      return response.json();\n    });\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import { client } from '../utils/fetchClient';\nimport { Comment, CommentDataToServer } from '../types/Comment';\n\nexport const getComments = (id: number): Promise<Comment[]> => {\n  return client.get(`/comments?postId=${id}`);\n};\n\nexport const deleteComment = (id:number) => {\n  return client.delete(`/comments/${id}`);\n};\n\nexport const addComment = (comment: CommentDataToServer): Promise<Comment> => {\n  return client.post('/comments', comment);\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import {\n  FC,\n  ChangeEvent,\n  useState,\n  FormEvent,\n} from 'react';\nimport classNames from 'classnames';\nimport { CommentData } from '../types/Comment';\n\ntype Props = {\n  isLoading: boolean;\n  isError: boolean;\n  onSubmit: (comment: CommentData) => void;\n  commentField: string;\n  onCommentChange: (value: string) => void;\n  commentFieldError: boolean;\n  setCommentError: (status: boolean) => void;\n};\n\nexport const NewCommentForm: FC<Props> = ({\n  isLoading,\n  isError,\n  onSubmit,\n  commentField,\n  onCommentChange,\n  commentFieldError,\n  setCommentError,\n}) => {\n  const [nameField, setNameField] = useState('');\n  const [emailField, setEmailField] = useState('');\n  const [nameFieldError, setNameFieldError] = useState(false);\n  const [emailFieldError, setEmailFieldError] = useState(false);\n\n  const handleSubmit = (event: FormEvent) => {\n    event.preventDefault();\n\n    const nameWithoutSpaces = nameField.trim();\n    const emailWithoutSpaces = emailField.trim();\n    const commentWithoutSpaces = commentField.trim();\n\n    if (!nameWithoutSpaces || !emailWithoutSpaces || !commentWithoutSpaces) {\n      if (!nameWithoutSpaces) {\n        setNameFieldError(true);\n      }\n\n      if (!emailWithoutSpaces) {\n        setEmailFieldError(true);\n      }\n\n      if (!commentWithoutSpaces) {\n        setCommentError(true);\n      }\n\n      return;\n    }\n\n    const newComment = {\n      name: nameField,\n      email: emailField,\n      body: commentField,\n    };\n\n    onSubmit(newComment);\n  };\n\n  const handleClearButton = () => {\n    setNameFieldError(false);\n    setNameField('');\n    setEmailFieldError(false);\n    setEmailField('');\n    setCommentError(false);\n    onCommentChange('');\n  };\n\n  const handleNameField = (event: ChangeEvent<HTMLInputElement>) => {\n    setNameFieldError(false);\n    setNameField(event.target.value);\n  };\n\n  const handleEmailField = (event: ChangeEvent<HTMLInputElement>) => {\n    setEmailFieldError(false);\n    setEmailField(event.target.value);\n  };\n\n  const handleCommentField = (event: ChangeEvent<HTMLTextAreaElement>) => {\n    setCommentError(false);\n    onCommentChange(event.target.value);\n  };\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={handleSubmit}\n    >\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames(\n              'input',\n              { 'is-danger': nameFieldError },\n            )}\n            value={nameField}\n            onChange={handleNameField}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {nameFieldError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {nameFieldError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames(\n              'input',\n              { 'is-danger': emailFieldError },\n            )}\n            value={emailField}\n            onChange={handleEmailField}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {emailFieldError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {emailFieldError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames(\n              'textarea',\n              { 'is-danger': commentFieldError },\n            )}\n            value={commentField}\n            onChange={handleCommentField}\n          />\n        </div>\n\n        {commentFieldError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames(\n              'button is-link',\n              { 'is-loading': isLoading },\n            )}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={handleClearButton}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n\n      {isError && (\n        <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n          Something went wrong\n        </div>\n      )}\n    </form>\n  );\n};\n","import {\n  FC,\n  useCallback,\n  useEffect,\n  useState,\n} from 'react';\nimport { getComments, deleteComment, addComment } from '../api/comments';\nimport { Post } from '../types/Post';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { Comment, CommentData } from '../types/Comment';\n\ntype Props = {\n  post: Post;\n};\n\nexport const PostDetails: FC<Props> = ({ post }) => {\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [isLoading, setLoading] = useState(false);\n  const [isError, setError] = useState(false);\n  const [isFormOpen, setFormOpen] = useState(false);\n  const [isAddingError, setAddingError] = useState(false);\n  const [isAddingLoading, setAddingLoadig] = useState(false);\n  const [commentField, setCommentField] = useState('');\n  const [commentFieldError, setCommentFieldError] = useState(false);\n\n  useEffect(() => {\n    setLoading(true);\n    setError(false);\n\n    const fetchData = async () => {\n      try {\n        const commentsFromServer = await getComments(post.id);\n\n        setComments(commentsFromServer);\n      } catch {\n        setError(true);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, [post]);\n\n  useEffect(() => {\n    const handlePostButtonClick = () => {\n      setFormOpen(false);\n    };\n\n    const buttons = document.querySelectorAll('[data-cy=\"PostButton\"]');\n\n    buttons.forEach(button => {\n      button.addEventListener('click', handlePostButtonClick);\n    });\n\n    return () => {\n      buttons.forEach(button => {\n        button.removeEventListener('click', handlePostButtonClick);\n      });\n    };\n  }, [isFormOpen]);\n\n  const removeComment = async (id: number) => {\n    setError(false);\n\n    let temporaryComments: Comment[];\n\n    setComments(prev => {\n      temporaryComments = prev;\n\n      return prev.filter(comment => comment.id !== id);\n    });\n\n    try {\n      await deleteComment(id);\n    } catch {\n      setError(true);\n      setComments(() => temporaryComments);\n    }\n  };\n\n  const addNewComment = useCallback(async (comment: CommentData) => {\n    setAddingError(false);\n    setAddingLoadig(true);\n\n    try {\n      const newCommentData = await addComment({\n        ...comment,\n        postId: post.id,\n      });\n\n      setComments(prev => {\n        return [\n          ...prev,\n          newCommentData,\n        ];\n      });\n\n      setCommentField('');\n    } catch {\n      setAddingError(true);\n    } finally {\n      setAddingLoadig(false);\n    }\n  }, []);\n\n  const {\n    id,\n    title,\n    body,\n  } = post;\n\n  const hasComments = comments.length > 0;\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${id}: ${title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {body}\n          </p>\n        </div>\n\n        {isLoading && (\n          <Loader />\n        )}\n\n        {!isLoading && (\n          <div className=\"block\">\n            {hasComments && (\n              <p className=\"title is-4\">Comments:</p>\n            )}\n\n            {isError && (\n              <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n                Something went wrong\n              </div>\n            )}\n\n            {!hasComments && !isError && (\n              <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n                No comments yet\n              </p>\n            )}\n\n            {comments.map(comment => {\n              const {\n                id: commentId,\n                body: commentText,\n                email,\n                name,\n              } = comment;\n\n              return (\n                <article\n                  className=\"message is-small\"\n                  data-cy=\"Comment\"\n                  key={commentId}\n                >\n                  <div className=\"message-header\">\n                    <a href={`mailto:${email}`} data-cy=\"CommentAuthor\">\n                      {name}\n                    </a>\n                    <button\n                      data-cy=\"CommentDelete\"\n                      type=\"button\"\n                      className=\"delete is-small\"\n                      aria-label=\"delete\"\n                      onClick={() => removeComment(commentId)}\n                    >\n                      delete button\n                    </button>\n                  </div>\n\n                  <div className=\"message-body\" data-cy=\"CommentBody\">\n                    {commentText}\n                  </div>\n                </article>\n              );\n            })}\n\n            {!isFormOpen && !isError && (\n              <button\n                data-cy=\"WriteCommentButton\"\n                type=\"button\"\n                className=\"button is-link\"\n                onClick={() => setFormOpen(true)}\n              >\n                Write a comment\n              </button>\n            )}\n          </div>\n        )}\n        {isFormOpen && !isError && (\n          <NewCommentForm\n            isLoading={isAddingLoading}\n            isError={isAddingError}\n            onSubmit={addNewComment}\n            commentField={commentField}\n            onCommentChange={setCommentField}\n            commentFieldError={commentFieldError}\n            setCommentError={setCommentFieldError}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import classNames from 'classnames';\nimport {\n  FC,\n  useEffect,\n  useRef,\n  useState,\n} from 'react';\nimport { User } from '../types/User';\n\ntype Props = {\n  users: User[];\n  activeUserId: number;\n  onUserChange: (id: number) => void;\n};\n\nexport const UserSelector: FC<Props> = ({\n  users,\n  activeUserId,\n  onUserChange,\n}) => {\n  const [isSelectOpen, setSelectOpen] = useState(false);\n  const dropdownRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (dropdownRef.current\n        && !dropdownRef.current.contains(event.target as Node)) {\n        setSelectOpen(false);\n      }\n    };\n\n    document.addEventListener('mousedown', handleClickOutside);\n\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, [dropdownRef]);\n\n  const handleSelect = () => {\n    setSelectOpen(prev => !prev);\n  };\n\n  const handleUserChange = (id: number) => {\n    onUserChange(id);\n    handleSelect();\n  };\n\n  const activeUser = users.find(user => user.id === activeUserId);\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={classNames(\n        'dropdown',\n        { 'is-active': isSelectOpen },\n      )}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={handleSelect}\n        >\n          <span>{activeUser?.name ?? 'Choose a user'}</span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        {isSelectOpen && (\n          <div className=\"dropdown-content\" ref={dropdownRef}>\n            {users.map(user => {\n              const {\n                id,\n                name,\n              } = user;\n\n              return (\n                <a\n                  key={id}\n                  className={classNames(\n                    'dropdown-item',\n                    { 'is-active': activeUserId === id },\n                  )}\n                  href={`#user-${id}`}\n                  onClick={() => handleUserChange(id)}\n                >\n                  {name}\n                </a>\n              );\n            })}\n          </div>\n        )}\n      </div>\n\n    </div>\n  );\n};\n","import React, { useCallback, useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { User } from './types/User';\nimport { getUsers } from './api/users';\nimport { getUserPosts } from './api/posts';\nimport { Post } from './types/Post';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [activeUserId, setActiveUserId] = useState(0);\n  const [userPosts, setUserPosts] = useState<Post[]>([]);\n  const [isLoading, setLoading] = useState(false);\n  const [isError, setError] = useState(false);\n  const [isNoPosts, setNoPosts] = useState(false);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const usersFromServer = await getUsers();\n\n        setUsers(usersFromServer);\n      } catch {\n        setError(true);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      if (activeUserId !== 0) {\n        setLoading(true);\n        setError(false);\n        setNoPosts(false);\n\n        try {\n          const postsFromServer = await getUserPosts(activeUserId);\n\n          if (postsFromServer.length < 1) {\n            setNoPosts(true);\n          }\n\n          setUserPosts(postsFromServer);\n        } catch {\n          setError(true);\n        } finally {\n          setLoading(false);\n        }\n      }\n    };\n\n    fetchData();\n  }, [activeUserId]);\n\n  const handleSelectedUser = useCallback((id: number) => {\n    if (id !== activeUserId) {\n      setActiveUserId(id);\n      setSelectedPost(null);\n    }\n  }, [activeUserId]);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  activeUserId={activeUserId}\n                  onUserChange={handleSelectedUser}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!activeUserId && !isError && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {isLoading && (\n                  <Loader />\n                )}\n\n                {isError && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n\n                { isNoPosts && (\n                  <div className=\"notification is-warning\" data-cy=\"NoPostsYet\">\n                    No posts yet\n                  </div>\n                )}\n\n                {!isLoading && userPosts.length > 0 && (\n                  <PostsList\n                    userPosts={userPosts}\n                    onPostSelect={setSelectedPost}\n                    selectedPostID={selectedPost?.id}\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': selectedPost },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              {selectedPost && (\n                <PostDetails post={selectedPost} />\n              )}\n            </div>\n          </div>\n\n        </div>\n      </div>\n    </main>\n  );\n};\n","import { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n","import { Post } from '../types/Post';\nimport { client } from '../utils/fetchClient';\n\nexport const getUserPosts = (id: number): Promise<Post[]> => {\n  return client.get(`/posts?userId=${id}`);\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}